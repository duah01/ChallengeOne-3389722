import java.util.*;

class Trie {

    class TrieNode {
        TrieNode[] children = new TrieNode[26];
        boolean isEndOfWord = false;
    }

    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    public void insert(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            int i = c - 'a';
            if (node.children[i] == null) {
                node.children[i] = new TrieNode();
            }
            node = node.children[i];
        }
        node.isEndOfWord = true;
    }

    public boolean search(String word) {
        TrieNode node = findNode(word);
        return node != null && node.isEndOfWord;
    }

    public boolean startsWith(String prefix) {
        return findNode(prefix) != null;
    }

    private TrieNode findNode(String str) {
        TrieNode node = root;
        for (char c : str.toCharArray()) {
            int i = c - 'a';
            if (node.children[i] == null) {
                return null;
            }
            node = node.children[i];
        }
        return node;
    }
}

public class Challenge1 {
    public static void main(String[] args) {
        // Input
        String[] commands = {"Trie", "insert", "search", "search", "startsWith", "insert", "search"};
        String[][] arguments = { {}, {"apple"}, {"apple"}, {"app"}, {"app"}, {"app"}, {"app"} };

        List<Object> output = new ArrayList<>();
        Trie trie = null;

        for (int i = 0; i < commands.length; i++) {
            switch (commands[i]) {
                case "Trie":
                    trie = new Trie();
                    output.add(null);
                    break;
                case "insert":
                    trie.insert(arguments[i][0]);
                    output.add(null);
                    break;
                case "search":
                    output.add(trie.search(arguments[i][0]));
                    break;
                case "startsWith":
                    output.add(trie.startsWith(arguments[i][0]));
                    break;
            }
        }

        System.out.println(output); // Expected: [null, null, true, false, true, null, true]
    }
}

